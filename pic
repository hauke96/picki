#!/bin/bash

set -e

# Default settings
output_folder=
url=
library_version=
library_name=

# usage
#
# Shows the help-message.
#
# Arguments: 
#   (none)
#
# Variables:
#   (none)
function usage(){
	cat <<END
TODO
END
}

# parse_conf_file
#
# Parses the conf file and saves the entries in the global variables.
# The config file "pic.conf" should exist.
#
# Arguments:
#   (none)
#
# Variables:
#   url
#   output_folder
function parse_conf_file(){
	while IFS= read -r line
	do
		key=${line%%\:*}
		value=${line#*:}

		case $key in
			url)
				url=$value
				;;
			output_folder)
				output_folder=$value
				;;
			\#*)
				# Lines with a "#" at the beginning are comments
				;;
			+)
				echo "Unknown config entry '$line'"
				;;
		esac
	done < "./pic.conf"
}

# To overwrite configs made in the "pic.conf", w parse before(!) reading the CLI-arguments
echo "Begin reading config"
parse_conf_file
echo "Finished reading config"

for (( i=1; i<=$#; i++ ))
do
	arg_i=${@:$i:1}   # get argument i
	arg_j=${@:$i+1:1} # get argument i+1
	case $arg_i in
	-h|--help)
		usage
		exit 0
		;;
	-o)
		output_folder=${arg_j#*./}
		shift
		;;
	--output=*)
		# split at = char and remove the shortest match from beginning
		output_folder=${arg_i#*=}
		# remove / at end (if none exists, nothing happens)
		output_folder=${output_folder%/}
		;;
	-u)
		url=$arg_j
		shift
		;;
	--url=http://*)
		# split at = char and remove the shortest match from beginning
		url=${arg_i#*=}
		shift
		;;
	-l)
		library_name=$arg_j
		shift
		;;
	--library=*)
		# split at = char and remove the shortest match from beginning
		library_name=${arg_i#*=}
		shift
		;;
	-v)
		library_version=$arg_j
		shift
		;;
	--version=*)
		# split at = char and remove the shortest match from beginning
		library_version=${arg_i#*=}
		shift
		;;
	*)
		echo "Unknown argument number $i: '$arg_i'"
		;;
	esac
done


